<?php
namespace idlikethis\Endpoints;

class ButtonClickPostRequestTest extends \Codeception\TestCase\WPTestCase
{

    /**
     * @var \tad_DI52_Container
     */
    protected static $container;

    public static function setUpBeforeClass()
    {
        self::$container = include codecept_root_dir('bootstrap.php');
        return parent::setUpBeforeClass(); // TODO: Change the autogenerated stub
    }

    public function setUp()
    {
        // before
        parent::setUp();

        // your set up methods here
    }

    public function tearDown()
    {
        // your tear down methods here

        // then
        parent::tearDown();
    }

    /**
     * @test
     * it should not insert any comment if post ID is missing from POST request
     */
    public function it_should_not_insert_any_comment_if_post_id_is_missing_from_post_request()
    {
        /** @var idlikethis_Endpoints_ButtonClickHandlerInterface $endpoint */
        $endpoint = self::$container->make('idlikethis_Endpoints_ButtonClickHandlerInterface');

        $request = new \WP_REST_Request('create', '/some-path', ['content' => 'some content']);
        /** @var \WP_REST_Response $out */
        $out = $endpoint->handle($request);

        $this->assertInstanceOf('WP_REST_Response', $out);
        $this->assertEquals(400, $out->get_status());
        $this->assertCount(0, get_comments(['comment_type' => 'idlikethis']));
    }

    /**
     * @test
     * it should not insert any comment if post ID is not a valid post ID
     */
    public function it_should_not_insert_any_comment_if_post_id_is_not_a_valid_post_id()
    {
        /** @var idlikethis_Endpoints_ButtonClickHandlerInterface $endpoint */
        $endpoint = self::$container->make('idlikethis_Endpoints_ButtonClickHandlerInterface');

        $request = new \WP_REST_Request('create', '/some-path', ['content' => 'some content', 'post_id' => 123]);
        /** @var \WP_REST_Response $out */
        $out = $endpoint->handle($request);

        $this->assertInstanceOf('WP_REST_Response', $out);
        $this->assertEquals(400, $out->get_status());
        $this->assertCount(0, get_comments(['comment_post_ID' => 123, 'comment_type' => 'idlikethis']));
    }

    /**
     * @test
     * it should not insert any comment if content is missing from POST request
     */
    public function it_should_not_insert_any_comment_if_content_is_missing_from_post_request()
    {
        $post_id = $this->factory()->post->create();

        /** @var idlikethis_Endpoints_ButtonClickHandlerInterface $endpoint */
        $endpoint = self::$container->make('idlikethis_Endpoints_ButtonClickHandlerInterface');

        $request = new \WP_REST_Request('create', '/some-path', ['post_id' => $post_id]);
        /** @var \WP_REST_Response $out */
        $out = $endpoint->handle($request);

        $this->assertInstanceOf('WP_REST_Response', $out);
        $this->assertEquals(400, $out->get_status());
        $this->assertCount(0, get_comments(['comment_post_ID' => $post_id, 'comment_type' => 'idlikethis']));
    }

    /**
     * @test
     * it should insert a comment when hitting the endpoint with valid params
     */
    public function it_should_insert_a_comment_when_hitting_the_endpoint_with_valid_params()
    {
        $post_id = $this->factory()->post->create();

        /** @var idlikethis_Endpoints_ButtonClickHandlerInterface $endpoint */
        $endpoint = self::$container->make('idlikethis_Endpoints_ButtonClickHandlerInterface');

        $request = new \WP_REST_Request();
        $request->set_param('post_id', $post_id);
        $request->set_param('content', 'some idea of mine');
        /** @var \WP_REST_Response $out */
        $out = $endpoint->handle($request);

        $this->assertInstanceOf('WP_REST_Response', $out);
        $this->assertEquals(200, $out->get_status());
        $this->assertCount(1, get_comments(['comment_post_ID' => $post_id, 'comment_type' => 'idlikethis', 'comment_content' => '0 - some idea of mine']));
    }
}